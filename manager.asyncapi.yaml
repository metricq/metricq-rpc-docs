# vim: set et ts=2 sw=2:

id: urn:rpc:metricq:manager
asyncapi: '2.0.0'

info:
  title: MetricQ Managment Protocol
  version: '0.1.0'

servers:
  production:
    url: "metricq.zih.tu-dresden.de"
    protocol: ampq

defaultContentType: application/json

channels:
  management/get_metrics:
    publish:
      message:
        name: "get_metrics"
        title: "get_metrics"
        summary: "Request information about available metrics"
        bindings:
          amqp:
            replyTo:
              type: string
        correlationId:
          location: $message.header#/correlation_id
        payload:
          $ref: "#/components/schemas/get_metrics"
    subscribe:
      message:
        name: "get_metrics"
        title: "A list of matching metrics, with optional metadata"
        payload:
          $ref: "#/components/schemas/get_metrics-response"

  management/get_configs:
    publish:
      message:
        name: "get_configs"
        title: "Retrieve configuration objects for matching clients"
        payload:
          $ref: "#/components/schemas/get_configs"
    subscribe:
      message:
        name: "get_configs"
        title: "A mapping of client names to their configuration"
        payload:
          $ref: "#/components/schemas/get_configs-response"

  management/sink.register:
    publish:
      operationId: "sink.register"
      message:
        name: "sink.register"
        title: "Register a sink with the manager"
        payload:
          properties:
            function:
              const: "sink.register"
              examples:
                - function: "sink.register"
    subscribe:
      operationId: "sink.register"
      message:
        name: "sink.register"
        title: "Registration response"
        payload:
          properties:
            type: object
            properties:
              dataServerAddress:
                $ref: "#/components/schemas/dataServerAddress"
              config:
                $ref: "#/components/schemas/configObject"


  management/sink.subscribe:
    publish:
      message:
        name: "sink.subscribe"
        title: "sink.subscribe"
        description: "Subscribe to receive data points for a set of metrics"
        payload:
          $ref: "#/components/schemas/sink.subscribe"

    subscribe:
      message:
        title: "sink.subscribe"
        description: >-
          `sink.subscribe` response
        payload:
          type: object
          properties:
            dataServerAddress:
                $ref: "#/components/schemas/dataServerAddress"
            dataQueue:
                $ref: "#/components/schemas/dataQueue"
            metrics:
                $ref: "#/components/schemas/metricCollection"

  management/sink.unsubscribe:
    publish:
      message:
        name: "sink.unsubscribe"
        title: "sink.unsubscribe"
        description: "Subscribe to receive data points for a set of metrics"
        payload:
          $ref: "#/components/schemas/sink.unsubscribe"

    subscribe:
      message:
        title: >-
          `sink.unsubscribe` response
        payload:
          type: object
          properties:
            dataServerAddress:
                $ref: "#/components/schemas/dataServerAddress"
            metrics:
                description: "The collection of metrics this client is no longer subscribed to"
                $ref: "#/components/schemas/metricCollection"

  management/sink.release:
    publish:
      message:
        name: "sink.release"
        title: "sink.release"
        description: "Release a data queue"
        payload:
          $ref: "#/components/schemas/rpcFunction"
          properties:
            function:
              const: "sink.release"
            dataQueue:
              $ref: "#/components/schemas/dataQueue"
    subscribe:
      message:
        payload:
          type: object

  broadcast/discover:
    subscribe:
      message:
        name: "discover"
        summary: "A discovery request sent to all clients online"
        payload:
          $ref: "#/components/schemas/discover"
    publish:
      message:
        name: "discover"
        summary: "A discovery response including operational information of a client"
        payload:
          $ref: "#/components/schemas/discover-response"

components:
  schemas:
    "discover":
      properties:
        function:
          const: "discover"

    "discover-response":
      properties:
        alive:
          type: boolean
          default: true
        currentTime:
          type: string
          format: date-time
          description: "Current time on this host"
        startingTime:
          type: string
          format: date-time
          description: "When this client was started and first connected to the network"
        uptime:
          type: integer
          format: nanoseconds
          description: >-
            Number of nanoseconds since startup of this client.

            If missing, assume this is the difference between `currentTime` and `startingTime`.

    "config":
      properties:
        function:
          const: "config"
      additionalProperties: true

    "get_metrics":
      $ref: "#/components/schemas/rpcFunction"
      properties:
        function:
          const: "get_metrics"
        format:
          description: "Whether to return an array of metric names or an object mapping metric names to their metadata"
          type: string
          enum: ["array", "object"]
          default: "array"
        historic:
          description: >-
            If given, limit returned metrics to either historic (`true`) or non-historic (`false`) metrics.
            If omitted, no filter is applied.
          type: boolean
        limit:
          description: >-
            Number of matched metrics to include in response.
            If omitted, all matching metrics are returned.
          type: integer
          minimum: 0
      oneOf:
        - properties:
            selector:
              $ref: "#/components/schemas/metricSelector"
        - properties:
            prefix:
              type: string
              description: "A prefix matching the start of a metric namek"
      examples:
        - function: "get_metrics"
          selector: "taurus\\.taurusi\\d{4}\\.cpu\\d\\+.power"
          limit: 20
        - function: "get_metrics"
          prefix: "taurus"
          historic: true

    "get_metrics-response":
      type: object
      properties:
        metrics:
            $ref: "#/components/schemas/metricCollection"

    "get_configs":
      properties:
        function:
          const: "get_configs"
        selector:
          description: "A selector matching clients by their token"
          oneOf:
            - type: array
              description: "A list of client tokens"
              items:
                type: string
            - type: string
              format: regex
              description: "A regular expression matching a set of client tokens"

    "get_configs-response":
      type: object
      additionalProperties:
        $ref: "#/components/schemas/configObject"
      examples:
        - "source-py-dummy":
            rate: 0.5

    "sink.register":
      properties:
        function:
          const: "sink.register"
          examples:
            - function: "sink.register"

    "sink.subscribe":
      properties:
        function:
          const: "sink.subscribe"
        metrics:
          $ref: "#/components/schemas/metricList"
        dataQueue:
          $ref: "#/components/schemas/dataQueue"
        expires:
          $ref: "#/components/schemas/seconds"
        metadata:
          description: >-
            Whether to include metadata for each metric in the reponse.


            If set to `false`, the result is an array of metric names,
            if set to `true`, an object mapping metric names to metadata objects is returned.

          type: boolean
          default: false
      required:
        - "metrics"
      examples:
        - function: "sink.subscribe"
          metrics: ["building-F.room-A14.temperature.celcius"]
          metadata: true

    "sink.unsubscribe":
      title: "sink.unsubscribe"
      description: "Stop receiving data points for a set of metrics"
      properties:
        dataQueue:
          $ref: "#/components/schemas/dataQueue"
        metrics:
          $ref: "#/components/schemas/metricList"
        end:
          type: boolean
          description: >-
            If `true`, the manager sends a `type="end"` message after unbinding the routing keys to indicate that no more message will arrive at this queue.
          default: true
      required:
        - "dataQueue"
        - "metrics"

    rpcFunction:
      type: object
      properties:
        function:
          $ref: "#/components/schemas/rpcFunctionName"
      required:
        - "function"

    rpcFunctionName:
      type: string
      title: "RPC function name"
      description: "A string identifying the requested RPC function"
      pattern: "([a-z_]+\\.)+[a-z_]+"

    metricName:
      type: string
      pattern: "([a-zA-Z][a-zA-Z0-9_]+\\.)+[a-zA-Z][a-zA-Z0-9_]+"
      examples:
        - "elab.bahka.power"
        - "elab.ariel.package0.dram.current"
        - "taurus.taurusi4101.cpu0.power"

    metricList:
      type: array
      description: "A list of metric names"
      items:
        $ref: "#/components/schemas/metricName"
      uniqueItems: true

    metricsWithMetadata:
      type: object
      description: "A mapping of metric names to metadata objects"
      additionalProperties:
        $ref: "#/components/schemas/metadata"
      examples:
        - elab.bahka.power:
            rate: 20
            scope: "last"
            unit: "W"

    metricCollection:
      description: "A collection of metric names, with optional metadata attached"
      oneOf:
        - $ref: "#/components/schemas/metricList"
        - $ref: "#/components/schemas/metricsWithMetadata"

    metricSelector:
      description: "A selector matching a set of metrics, either by regex or explicit listing"
      oneOf:
        - type: string
          format: regex
          description: "A regular expression matching a set of metric names"
          examples:
            - "taurus\\.taurusi\\d{4}\\.cpu\\d\\+.power"
        - $ref: "#/components/schemas/metricList"

    dataQueue:
      type: string
      format: "uri"
      examples:
        - "amqp://user:pass@localhost/vhost"
        - "amqps://metricq.example.com:50505/"

    seconds:
      type: integer
      format: seconds
      minimum: 0

    metadata:
      description: "A metadata object"
      type: object
      properties:
        unit:
          type: string
        rate:
          type: integer
        scope:
          enum: ["last", "next", "point"]
        quantity:
          type: string
        description:
          type: string
      examples:
        - rate: 0.1

    configObject:
      description: "A client configuration object"
      type: object

    dataServerAddress:
      type: string
      format: url
      description: "URL pointing to the AMQP broker where data queues are handled"
      examples:
        - "amqp://user:pass@localhost/data-vhost"
        - "amqps://metricq.example.com:50505/"
